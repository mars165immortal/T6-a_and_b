{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "My API",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "User",
      "description": "Endpoints"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "read_pets": "read your pets",
        "write_pets": "modify pets in your account"
      }
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to get a user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID."
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Any filter.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User found.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to update a user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID."
          },
          {
            "name": "updateUser",
            "in": "body",
            "description": "User information to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUser"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User updated successfully!"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to delete a user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID."
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully!"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to add a user.",
        "parameters": [
          {
            "name": "newUser",
            "in": "body",
            "description": "User information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully!"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to get all users.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all users.",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/customers/{customerId}/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Endpoint to get all orders for a customer.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Customer ID."
          }
        ],
        "responses": {
          "200": {
            "description": "List of all orders for the customer.",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "description": "Endpoint to create a new order.",
        "parameters": [
          {
            "name": "newOrder",
            "in": "body",
            "description": "Order information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddOrder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Order created successfully!"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "description": "Endpoint to get all products.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all products.",
            "schema": {
              "$ref": "#/definitions/Products"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "description": "Endpoint to get a specific product.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Product ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Product found.",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/orders/{orderId}": {
      "put": {
        "tags": [
          "Orders"
        ],
        "description": "Endpoint to update an existing order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Order ID."
          },
          {
            "name": "updateOrder",
            "in": "body",
            "description": "Order information to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOrder"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Order updated successfully!"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/devices/{id}": {
      "get": {
        "tags": [
          "Device"
        ],
        "description": "Endpoint to get a device by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Device ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Device found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "404": {
            "description": "Device not found."
          }
        }
      },
      "put": {
        "tags": [
          "Device"
        ],
        "description": "Endpoint to update a device by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Device ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Device updated successfully."
          },
          "404": {
            "description": "Device not found."
          },
          "500": {
            "description": "Error message."
          }
        },
        "requestBody": {
          "description": "Device information to be updated.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceInput"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Device"
        ],
        "description": "Endpoint to delete a device by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Device ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Device deleted successfully."
          },
          "404": {
            "description": "Device not found."
          },
          "500": {
            "description": "Error message."
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Jhon Doe"
        },
        "age": {
          "type": "number",
          "example": 29
        },
        "parents": {
          "type": "object",
          "properties": {
            "father": {
              "type": "string",
              "example": "Simon Doe"
            },
            "mother": {
              "type": "string",
              "example": "Marie Doe"
            }
          }
        },
        "diplomas": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "school": {
                "type": "string",
                "example": "XYZ University"
              },
              "year": {
                "type": "number",
                "example": 2020
              },
              "completed": {
                "type": "boolean",
                "example": true
              },
              "internship": {
                "type": "object",
                "properties": {
                  "hours": {
                    "type": "number",
                    "example": 290
                  },
                  "location": {
                    "type": "string",
                    "example": "XYZ Company"
                  }
                }
              }
            }
          }
        }
      }
    },
    "AddUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Jhon Doe"
        },
        "age": {
          "type": "number",
          "example": 29
        },
        "about": {
          "type": "string",
          "example": ""
        }
      },
      "required": [
        "name",
        "age"
      ]
    }
  }
}